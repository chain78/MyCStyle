GNU C库参考手册
第一章 引言

1、引言
     C程序设计语言本身不提供诸如输入/输出，内存管理，字符串操作等通用操作函数，这些函数被定义在标准库中，可以编译和链接到程序中。
   
     本书中阐述的GNU C库，定义了所有在ISO C标准所规定的，以及POSIX标准、其它相关标准和UNIX系统所派生的标准中定义的所有函数，为GNU操作系统所支持。 
      本手册的目的是教你如何使用GNU library提供的所有函数。在此所指出所有函数是哪个标准所定义的，以帮助你发现潜在的造成不可移植的因数。但强调可移植性不是手册的目的。 

1.1入门
     本书假设读者了解C程序设计语言基础(最好是传统的ISO标准C)和编程概念。
     GNU C函数库包含了一些头文件，每个头文件提供一组相关组件的定义和声明；这些是C编译器处理程序时要用到的。例如，stdio.h头文件声明了输入和输出函数，string.h声明了字符串处理函数。本手册也是根据这些头文件来组织的。

     如果你是第一次阅读本手册，你应该阅读所有介绍部分，跳过其余章节。因为GNU C库中提供了大量的函数，你想熟记每一个函数的用法是不现实的。更重要的是，你应该了解GNU中提供了哪些函数，以便你在写程序时知道可以使用哪个，以及在本书中哪里可以找到它们的使用说明。 

1.2标准和可移植性
    本小节讨论GNU C库遵照的各种各样标准和其他来源。这些来源包括：ISO C、POSIX标准、System V及BSD（伯克利）UNIX的实施标准。 
    本手册中最重要的目的是告诉你如何有效地使用GNU C库提供的函数。然而，如果你想让你的程序兼容这些标准，或者易于移植到其它操作系统，都会影响你如何使用GNU C库。这个小节对各种标准作一概述。 
附录B提供了一个按字母顺序排列的GNU C库所提供的函数、符号列表，这个列表中也指出了每个函数、符号是出自哪个标准的。 
   
1.2.1 ISO C
   GNU C库与被美国国家标准协会ANSI所采用的C标准----“ANSI C”（ANSI X3.159-1989）以及后来国际标准化组织ISO所采用的 C标准----“ISO C”（ISO/IEC 9899:1990，“Programming languages-C”）兼容。我们也参照了ISO C这一越来越被关注和认可的标准。GNU C所提供的所有头文件和函数是ISO C的超集。 
如果想要严格遵守ISO C标准，可以在使用GNU C编译器时加上“-ansi”开关选项，这个开关选项将使得编译器仅使用ISO C标准所定义的函数，除非你显式地说明，具体使用的方法将在1.3.4小节讲述。 
能够限制库函数只包括ISO C特性是十分重要的，因为ISO C指出了一些特殊的限制，而GNU所扩展部分并不符合这些限制，1.3.3小节中有更多的信息。 
本手册并没有努力指出ISO C与原来老的非标准版本的区别的细节内容。在此会给出一些让你的程序在各种原来老的非标准版本中移植，但这不是本手册的目标。
 
1.2.2 POSIX（可移植操作系统接口） 
   GNU C库也与ISO POSIX协议族（ISO/IEC 9945，ANSI/IEEE Std 1003）兼容。POSIX来源于各种各样的UNIX操作系统。 
POSIX标准库是ISO C标准库的超集，POSIX定义了新的一新附加函数，这些函数提供了一些针对典型的操作系统环境的低级支持，而不是提供通用的，使程序能运行在各种操作系统环境下的函数。 
   GNU C库中实现了所有的在ISO/IEC 9945-1：1996标准----POSIX 1.1（系统应用程序接口）中所定义的函数功能。对于ISO C标准而言，最主要的扩展在于文件接口 、特殊设备控制函数以及进程处理函数。 
   同时GNU C库也实现了ISO/IEC 9945-2:1993----POSIX.2（shell和工具标准）中所定义的一些函数功能。 

1.2.3 伯克利Unix 
   GNU C库还从像4.2 BSD、4.3 BSD、4.4 BSD UNIX系统以及SunOS系统中吸收了一些非正式标准的函数。而这些系统支持绝大部分的ISO C和POSIX标准，事实上，在4.4 BSD系统和SunOS的较新版本都完全支持了这两个标准。 
BSD加入了对“符号链接”的定义，新增了select函数、BSD信号（signal）函数，还有著名的sockets函数库。 

1.2.4 SVID (System V接口定义) 
   System V接口定义（SVID）是一个描述AT&T UNIX System V操作系统的文档。它是POSIX标准的超集。 
   GNU C库定义了几乎包括了那些SVID需要的、ISO C或POSIX标准不需要的函数，以期与System V及其它UNIX系统（如SunOS）兼容。同时，GNU C也剔除了那些在SVID中模糊不清、不常用的函数定义。（事实上，UNIX System V系统本身也没有实现它们） 
在SVID中提供了IPC进程间通信、共享内存，hsearch和drand48函数集，fmtmsg以及一些数学运算函数。 

1.2.5       XPG (X/Open可移植系统指南) 
   X/Open可移植系统指南，是X/Open公司出版的，是一个比POSIX更通用的事实标准。X/Open公司拥有UNIX系统的版权，XPG说明是用于满足设计UNIX系统的需要设计的。 
GNU C库遵照X/Open可移植系统指南V4.2，以及所有X/Open系统接口的接展，如XSI（X/Open系统接口）等。 
附加的功能主要来自于System V和BSD系统。一些System V中的错误也得到了纠正。获得XPG标准的认可是一个UNIX系统很重要的一关。

1.3使用库函数
  本节将介绍如何使用GNU C库。

1.3.1头文件
   供C程序使用的库由两部分组成：包含类型定义、宏定义和变量声明、函数声明的头文件；以及实际库或包含变量和函数定义的存档。
  (记住，声明只说明函数或变量存在，并给定了其类型。对于函数声明，同时提供了参数类型。这些声明的目的是使编译器正确地处理变量和函数。而定义则为变量分配了存储空间或实现了函数定义。
   为了使用GNU C库中的函数，必须确保程序包含了正确的头文件。这使得编译器获得了可用的组件并正确地处理对它们的引用。当程序被编译时，链接器将从文档文件中实际的定义解析到对它们的引用。
   在源程序中通过'#include'预处理器指令包含头文件.C语言支持两种形式的指令：
   #include "header"常用来包含你自己写的头文件，这将包含你特定应用程序不同部分的接口定义和声明。
   #include <file.h>常用来包含标准库中的头文件file.h,此文件通常被系统管理员安装在标准的位置。
   '#include'指令通常放置在C源文件顶部，其它代码之前。在你源文件的开始处编写注释说明文档功能，然后在测试宏后写入'#include'指令。
   更多的如何使用头文件信息和'include'指令请参见The GNU C Preprocessor Manual(GNU C预处理手册)中的头文件章节。
   GNU C库提供了很多头文件，每个头文件包含一组相关组件的类型定义、宏定义和变量声明、函数声明。这说明程序必须包含你所使用组件的某些头文件。
   一些库头文件会自动包含其它库头文件。然而，一个良好的编程风格，你不能依赖于此，最好明确地包含所有你所使用组件的头文件。GNU C库头文件以这种方式编写而不关心一个头文件不止一次被包含，重复包含某一头文件将不会有任何影响。同样，如果程序需要多个头文件，不需要考虑它们的包含顺序。
    注意兼容性：在任意ISO C实现中以任意顺序、任意次数包含标准头文件都可以正常运行。然而，这在很多旧版的C实现上并没有形成惯例。
    严格意义上讲，你可以根据本手册规范自己明确地声明一个函数，不必非要使用声明在头文件中的某一函数。但是通常还是最好使用头文件，它定义了可用的类型和宏定义，定义了更有效的宏代替某些函数。同时保证正确地声明。
     
1.3.3
